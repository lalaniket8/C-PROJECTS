package doomsday_fuel;


public class Answer {   
    public static int[] answer(double[][] m) { 
        
    	double[][] f = invert(m);
    	int[] a = {1,2,3,4};
    	
    	for(int i=0; i < f.length; i++)
    		for(int j=0; j< f.length; j++)
    			{f[i][j]*=-1;if(i==j){f[i][j]++;}}
    		
    	
    	for(double[] oel:f){
    		for(double el:oel){
    			System.out.print(el+" ");
    		}
    		System.out.println();
    	}
    	
    	double m2[][] = {{0,0,0,0.5},{0,3.0/9.0,2.0/9.0,0}};
    	
    	 double[][] z = multiply(f,m2,2,2,4);
    	for(double[] oel:z){
    		for(double el:oel){
    			System.out.print(el+" ");
    		}
    		System.out.println();
    	}
    	double sum=0;
    	for(int i=0; i < 4; i++)
    		{for(int j=0; j< 2; j++)
    			{sum+=z[j][i];}
    		System.out.println(i+") "+(sum));sum=0;
    		}
        return a;
    } 
    public static double[][] multiply(double[][] first ,double[][] second,int m,int p,int q){
    	    	
    	double multiply[][] = new double[m][q];
    	double sum=0;
    	
    	for(int c=0; c<m; c++)
        {
           for(int d=0; d<q; d++)
           {   
              for(int k=0; k<p; k++)
              {
                 sum = sum + first[c][k]*second[k][d];
              }

              multiply[c][d] = sum;
              sum = 0;
           }
        }
    	return multiply;
    }
    public static double[][] invert(double a[][]) 
    {
        int n = a.length;
        double x[][] = new double[n][n];
        double b[][] = new double[n][n];
        int index[] = new int[n];
        for (int i=0; i<n; ++i) 
            b[i][i] = 1;
 
 // Transform the matrix into an upper triangle
        gaussian(a, index);
 
 // Update the matrix b[i][j] with the ratios stored
        for (int i=0; i<n-1; ++i)
            for (int j=i+1; j<n; ++j)
                for (int k=0; k<n; ++k)
                    b[index[j]][k]
                    	    -= a[index[j]][i]*b[index[i]][k];
 
 // Perform backward substitutions
        for (int i=0; i<n; ++i) 
        {
            x[n-1][i] = b[index[n-1]][i]/a[index[n-1]][n-1];
            for (int j=n-2; j>=0; --j) 
            {
                x[j][i] = b[index[j]][i];
                for (int k=j+1; k<n; ++k) 
                {
                    x[j][i] -= a[index[j]][k]*x[k][i];
                }
                x[j][i] /= a[index[j]][j];
            }
        }
        return x;
    }
 
// Method to carry out the partial-pivoting Gaussian
// elimination.  Here index[] stores pivoting order.
 
    public static void gaussian(double a[][], int index[]) 
    {
        int n = index.length;
        double c[] = new double[n];
 
 // Initialize the index
        for (int i=0; i<n; ++i) 
            index[i] = i;
 
 // Find the rescaling factors, one from each row
        for (int i=0; i<n; ++i) 
        {
            double c1 = 0;
            for (int j=0; j<n; ++j) 
            {
                double c0 = Math.abs(a[i][j]);
                if (c0 > c1) c1 = c0;
            }
            c[i] = c1;
        }
 
 // Search the pivoting element from each column
        int k = 0;
        for (int j=0; j<n-1; ++j) 
        {
            double pi1 = 0;
            for (int i=j; i<n; ++i) 
            {
                double pi0 = Math.abs(a[index[i]][j]);
                pi0 /= c[index[i]];
                if (pi0 > pi1) 
                {
                    pi1 = pi0;
                    k = i;
                }
            }
 
   // Interchange rows according to the pivoting order
            int itmp = index[j];
            index[j] = index[k];
            index[k] = itmp;
            for (int i=j+1; i<n; ++i) 	
            {
                double pj = a[index[i]][j]/a[index[j]][j];
 
 // Record pivoting ratios below the diagonal
                a[index[i]][j] = pj;
 
 // Modify other elements accordingly
                for (int l=j+1; l<n; ++l)
                    a[index[i]][l] -= pj*a[index[j]][l];
            }
        }
    }
}

